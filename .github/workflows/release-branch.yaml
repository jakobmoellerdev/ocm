
# This creates a new release branch from the main branch.
# It serves as the cutoff point for the next minor release.
# From this point onward only bug fixes and critical changes will be accepted onto the release
# branch as backports from main. At the same time, the main branch will be open for new features
# and changes for the next minor release.
name: Release Branch Cutoff

on:
  workflow_dispatch:

jobs:
  cutoff-preconditions:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
      repository-projects: read
    outputs:
      minor: ${{ steps.get-minor.outputs.minor }}
    steps:
      - name: Generate token
        id: generate_token
        uses: tibdex/github-app-token@v2
        with:
          app_id: ${{ secrets.OCMBOT_APP_ID }}
          private_key: ${{ secrets.OCMBOT_PRIV_KEY }}
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0
          token: ${{ steps.generate_token.outputs.token }}
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: '${{ github.workspace }}/go.mod'
          cache: false
      - name: Get Minor
        id: get-minor
        run: |
          set -e
          minor="$(go run ./api/version/generate print-major-minor)"
          echo "minor=$minor" >> $GITHUB_OUTPUT
          echo "Current Major-Minor Version: $minor"
      - name: Verify Release Notes already exist
        id: verify-release-notes
        env:
          RELEASE_VERSION: ${{ steps.get-minor.outputs.minor }}.0
        run: |
          f="docs/releasenotes/$RELEASE_VERSION.md"
          if [ ! -f "$f" ]; then
            >&2 echo "no release notes file $f found in code base"
            exit 2
          else
            echo "Using release notes file $f from code base"
          fi
          echo "release-notes-file=$f" >> $GITHUB_ENV
          echo "release-notes-file=$f" >> $GITHUB_OUTPUT

  create-branch:
    runs-on: ubuntu-latest
    needs: cutoff-preconditions
    permissions:
      contents: write
      id-token: write
      repository-projects: read
    steps:
      - name: Generate token
        id: generate_token
        uses: tibdex/github-app-token@v2
        with:
          app_id: ${{ secrets.OCMBOT_APP_ID }}
          private_key: ${{ secrets.OCMBOT_PRIV_KEY }}
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0
          token: ${{ steps.generate_token.outputs.token }}

      - name: Create Release Branch
        run: |
          set -e
          git config --global user.name github-actions
          git config --global user.email '${GITHUB_ACTOR}@users.noreply.github.com'
          
          minor="${{ needs.cutoff-preconditions.outputs.minor }}"
          
          if ! [[ "$tag" =~ ^v?[0-9]+\.[0-9]+$ ]]; then
            >&2 echo "no valid release branch minor $minor: it has to be of the form '^v?[0-9]+\.[0-9]+$'"
            exit 1
          fi
          
          
          branch="releases/$minor"
          
          if git ls-remote --exit-code origin refs/heads/$branch ; then
            >&2 echo "branch $branch already exists, aborting"
            exit 1
          fi
          
          echo "creating release branch: $branch"
          
          git checkout -b "$branch"
          git push origin $branch
  bump-main-pr:
    name: Bump Main Branch to the next Minor Version
    runs-on: ubuntu-latest
    needs: create-branch # wait for the release branch to be created, then create a version bump
    steps:
      - name: Generate token
        id: generate_token
        uses: tibdex/github-app-token@v2
        with:
          app_id: ${{ secrets.OCMBOT_APP_ID }}
          private_key: ${{ secrets.OCMBOT_PRIV_KEY }}
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0
          token: ${{ steps.generate_token.outputs.token }}
      - name: Version Bump
        id: version-bump
        run: |
          set -e
          
          echo "determining next version"
          version=$(go run ./api/version/generate bump-version)
          
          branch="chore/bump-main/$version"
          
          git checkout -b chore/bump-main-to-$branch
          
          echo "bumping main branch to $version"
          echo $version > VERSION

          # Trigger a bump of any potential files that depend on a new version
          make -f hack/Makefile mdref && make -f hack/Makefile go-bindata && make generate
          
          echo "version=$version" >> $GITHUB_OUTPUT
          echo "branch=$branch" >> $GITHUB_OUTPUT

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ steps.generate_token.outputs.token }}
          title: "chore: bump VERSION to ${{ steps.version-bump.outputs.version }}"
          commit-message: "[github-actions] Bump to ${{ steps.version-bump.outputs.version }} after branch cutoff"
          branch: ${{ steps.version-bump.outputs.branch }}
          delete-branch: true
          sign-commits: true
          body: |
            Update OCM Version to ${{ steps.version-bump.outputs.version }} 
            
            After the release branch cutoff to ${{ github.event.inputs.minor }} into ${{ steps.version-bump.outputs.branch }},
            this bumps the OCM version so that future development continues on the next minor release.
          
